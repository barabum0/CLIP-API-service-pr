[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "CLIP-API-service"
version = "0.1.2"
authors = [
  { name="BentoML Authors", email="contact@bentoml.com" },
]
license = { text="Apache-2.0" }
description = "Build AI applications with any CLIP models - embed image and sentences, object recognition, visual reasoning, image classification and reverse image search"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
keywords = [
    "CLIP",
    "BentoML",
    "Model-Inference",
    "image-search",
    "object-detection",
    "visual-reasoning",
    "image-classification",
    "transformers",
    "artificial-intelligence",
    "machine-learning",
]
dependencies = [
    "bentoml>=1.0.20",
    "bentoml",
    "transformers",
    "accelerate",
    "optimum",
    "pydantic",
    "Pillow",
    "open-clip-torch",
    "torch==2.0.0",
    "typer",
]

[project.urls]
"Homepage" = "https://github.com/bentoml/CLIP-API-service"
"Bug Tracker" = "https://github.com/bentoml/CLIP-API-service/issues"

[project.scripts]
clip-api-service = "clip_api_service.cli:app"

[tool.pdm.dev-dependencies]
test = [
    "pytest"
]


[tool.pdm.scripts]
black = "black {args:.}"
ruff = "ruff check --fix --show-fixes {args:.}"
style = {composite = ["black", "ruff"]}
test = "pytest {args:tests}"

[tool.black]
target-version = ["py38"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

[tool.ruff.isort]
known-first-party = ["hatch_demo"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10